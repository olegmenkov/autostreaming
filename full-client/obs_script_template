# import subprocess
import json
import paho.mqtt.client as mqtt
import obspython as obs
import cv2


global username
# username =
global password
# password =
global client


def ping_sources() -> dict:
    resp = dict()
    for source in obs.obs_enum_sources():
        source_name = obs.obs_source_get_name(source)
        pipeline = obs.obs_data_get_string(obs.obs_source_get_settings(source), "pipeline")
        if pipeline and "rtsp://" in pipeline:
            rtsp_address = pipeline.split("location=")[1].split(" ")[0]
            # ip_address = rtsp_address.split("//")[1].split("/")[0]
            # if ":" in ip_address:
            #     ip_address = ip_address.split(":")[0]
            # ping = subprocess.call("ping -n 1 " + ip_address, shell=True) == 0
            is_online = True
            rtsp_stream = cv2.VideoCapture(rtsp_address, cv2.CAP_FFMPEG)
            if not rtsp_stream.isOpened():
                is_online = False
            try:
                _, frame = rtsp_stream.read()
            except:
                is_online = False

            resp[source_name] = {
                "address": rtsp_address,
                "is_online": is_online
            }
    return resp


# find path to obs64.exe in disk C:\
# def find():
#     for root, _, files in os.walk("C:\\"):
#         if "autostreaming.env" in files:
#             return os.path.join(root + "\\autostreaming.env")


def script_description():
    return "Ping all ip cameras"


def on_connect(client_, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client_.subscribe("autostream/ping_sources")


def publish(client_, topic):
    msg = json.dumps(ping_sources())
    result = client_.publish(topic, msg)
    # status = result[0]
    # if not status:
    #     print(f"Send {msg} to {topic}")
    # else:
    #     print(f"Failed to send message to topic {topic}")


def on_message(client_, userdata, msg):
    if json.loads(msg.payload) == "PING_OBS":
        publish(client_, msg.topic)


def script_load(settings):
    global client, username, password
    topic = "autostream/ping_sources"
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    # get local variables
    # env_path = find()
    # load_dotenv("autostreaming.env")
    # username = os.getenv("NAME")
    # password = os.getenv("PASSWORD")
    client.username_pw_set(username, password)
    # connect_async to allow background processing
    client.connect_async("172.18.130.40", 1883, 60)
    client.loop_start()
    # obs.timer_add(ping_sources, 5000)


def script_unload():
    print("STOP")
    client.loop_stop()
